- hosts: localhost
  gather_facts: False
  become: true
  tasks:
    - name: add ssh keys
      ansible.posix.authorized_key:
        user: srvadmin
        state: present
        key: '{{ item }}'
      with_file:
        - ssh-keys/vasilevichdv1
        - ssh-keys/vasilevichdv2
        - ssh-keys/galko

    - name: add ssh keys
      ansible.posix.authorized_key:
        user: root
        state: present
        key: '{{ item }}'
      with_file:
        - ssh-keys/vasilevichdv1
        - ssh-keys/vasilevichdv2
        - ssh-keys/galko

    - name: restart sshd
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: sshd      

- hosts: k8s
  remote_user: kuberadm
  become: True
  tasks:
    - name: Set a hostname
      ansible.builtin.hostname:
        name: "{{inventory_hostname}}"

    - name: Set a hostname specifying strategy
      ansible.builtin.hostname:
        name: "{{inventory_hostname}}"
        use: systemd

    - name: Configure Hosts file
      shell: printf '{{ hostvars[groups['etcd'][0]].ansible_host }} {{ hostvars[groups['etcd'][0]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['etcd'][0]].inventory_hostname}}
            \n{{ hostvars[groups['etcd'][1]].ansible_host }} {{ hostvars[groups['etcd'][1]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['etcd'][1]].inventory_hostname}}
            \n{{ hostvars[groups['etcd'][2]].ansible_host }} {{ hostvars[groups['etcd'][2]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['etcd'][2]].inventory_hostname}}
            \n{{ hostvars[groups['etcd'][3]].ansible_host }} {{ hostvars[groups['etcd'][3]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['etcd'][3]].inventory_hostname}}
            \n{{ hostvars[groups['etcd'][4]].ansible_host }} {{ hostvars[groups['etcd'][4]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['etcd'][4]].inventory_hostname}}
            \n{{ hostvars[groups['master'][0]].ansible_host }} {{ hostvars[groups['master'][0]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['master'][0]].inventory_hostname}}
            \n{{ hostvars[groups['master'][1]].ansible_host }} {{ hostvars[groups['master'][1]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['master'][1]].inventory_hostname}}
            \n{{ hostvars[groups['master'][2]].ansible_host }} {{ hostvars[groups['master'][2]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['master'][2]].inventory_hostname}}
            \n{{ hostvars[groups['master'][3]].ansible_host }} {{ hostvars[groups['master'][3]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['master'][3]].inventory_hostname}}
            \n{{ hostvars[groups['master'][4]].ansible_host }} {{ hostvars[groups['master'][4]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['master'][4]].inventory_hostname}}
            \n{{ hostvars[groups['worker'][0]].ansible_host }} {{ hostvars[groups['worker'][0]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['worker'][0]].inventory_hostname}}
            \n{{ hostvars[groups['worker'][1]].ansible_host }} {{ hostvars[groups['worker'][1]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['worker'][1]].inventory_hostname}}
            \n{{ hostvars[groups['worker'][2]].ansible_host }} {{ hostvars[groups['worker'][2]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['worker'][2]].inventory_hostname}}
            \n{{ hostvars[groups['worker'][3]].ansible_host }} {{ hostvars[groups['worker'][3]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['worker'][3]].inventory_hostname}}
            \n{{ hostvars[groups['worker'][4]].ansible_host }} {{ hostvars[groups['worker'][4]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['worker'][4]].inventory_hostname}}
            \n{{ hostvars[groups['worker'][5]].ansible_host }} {{ hostvars[groups['worker'][5]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['worker'][5]].inventory_hostname}}
            \n{{ hostvars[groups['worker'][6]].ansible_host }} {{ hostvars[groups['worker'][6]].inventory_hostname}}.okbtsp.local {{ hostvars[groups['worker'][6]].inventory_hostname}}' >> /etc/hosts  
    
    - name: allow local admin to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        line: 'kuberadm ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: add ssh keys
      ansible.posix.authorized_key:
        user: kuberadm
        state: present
        key: '{{ item }}'
      with_file:
        - ssh-keys/vasilevichdv1
        - ssh-keys/vasilevichdv2
        - ssh-keys/galko

    - name: add ssh keys
      ansible.posix.authorized_key:
        user: root
        state: present
        key: '{{ item }}'
      with_file:
        - ssh-keys/vasilevichdv1
        - ssh-keys/vasilevichdv2
        - ssh-keys/galko        

    - name: restart sshd
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: sshd   
    
    - name: open ports
      shell: |
              sudo ufw allow 6443/tcp
              sudo ufw allow 2379/tcp
              sudo ufw allow 2380/tcp   
      
    - name: Disable SWAP (step 1)
      command: swapoff -a

    - name: Disable SWAP (step 2)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'   

# ############ Config for Docker #############################################
    - name: Install required system package
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - gnupg-agent
        - virtualenv
        - python3-setuptools
        - nfs-common
        - net-tools  
      retries: 3
      delay: 10 

    - name: Add Docker GPG apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker-CE
      apt:
        name: docker-ce
        state: latest
        update_cache: yes
      retries: 3
      delay: 10  

    - name: set user docker permissions
      pip:
        name: docker
    - name: Add docker user
      command: "sudo usermod -aG docker kuberadm"

    - name: Add conf for networking
      shell: |
              sudo cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
              br_netfilter
              EOF

    - name: Add conf for docker
      shell: |
              sudo cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
              net.bridge.bridge-nf-call-ip6tables = 1
              net.bridge.bridge-nf-call-iptables = 1       

    - name: Apply new settings
      command: sudo sysctl --system           

    - name: Config docker cgroup driver 
      shell: |
              sudo cat <<EOF | sudo tee /etc/docker/daemon.json
              {
                "exec-opts": ["native.cgroupdriver=systemd"],
                "log-driver": "json-file",
                "log-opts": {
                   "max-size": "100m"
                 },
                 "storage-driver": "overlay2"
              }

    - name: systemd config
      shell: |
              sudo systemctl enable docker
              sudo systemctl daemon-reload
              sudo systemctl restart docker
                                
    - name: Create kubernetes repo file
      file:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        state: "touch"

    - name: Install K8s Source
      shell: |
              sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
              echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
              sudo apt-get update
              sudo apt-get install -y kubelet kubeadm kubectl
              sudo apt-mark hold kubelet kubeadm kubectl
      retries: 5
      delay: 10  

     

############## Config for containerd #############################################

    # - name: Install required system package
    #   apt:
    #     name: "{{ item }}"
    #     state: latest
    #   loop:
    #     - apt-transport-https
    #     - ca-certificates
    #     - gnupg2
    #     - software-properties-common
    #     - curl
    #     - virtualenv
    #     - net-tools
    #     - git
    #     - libseccomp2

    # - name: Create containerd config file
    #   file:
    #     path: "/etc/modules-load.d/containerd.conf"
    #     state: "touch"

    # - name: Add conf for containerd
    #   blockinfile:
    #     path: "/etc/modules-load.d/containerd.conf"
    #     block: |
    #           overlay
    #           br_netfilter

    # - name: modprobe
    #   shell: |
    #           sudo modprobe overlay
    #           sudo modprobe br_netfilter

    # - name: Set system configurations for Kubernetes networking
    #   file:
    #     path: "/etc/sysctl.d/99-kubernetes-cri.conf"
    #     state: "touch"

    # - name: Add conf for containerd
    #   blockinfile:
    #     path: "/etc/sysctl.d/99-kubernetes-cri.conf"
    #     block: |
    #            net.bridge.bridge-nf-call-iptables = 1
    #            net.ipv4.ip_forward = 1
    #            net.bridge.bridge-nf-call-ip6tables = 1
    #            net.ipv4.conf.default.rp_filter = 1
    #            net.ipv4.conf.all.rp_filter = 1

    # - name: Apply new settings
    #   command: sudo sysctl --system

    # - name: install containerd
    #   shell: |
    #           sudo apt-get update && sudo apt-get install -y containerd
    #           sudo mkdir -p /etc/containerd
    #           sudo containerd config default | sudo tee /etc/containerd/config.toml
    #           sudo systemctl restart containerd
    
    # - name: Fix config.toml
    #   lineinfile:
    #     path: /etc/containerd/config.toml
    #     regexp: '            SystemdCgroup = false'
    #     line:   '            SystemdCgroup = true'            

    # - name: Create kubernetes repo file
    #   file:
    #     path: "/etc/apt/sources.list.d/kubernetes.list"
    #     state: "touch"

    # - name: Install K8s Source
    #   shell: |
    #           sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    #           echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    #           sudo apt-get update
    #           sudo apt-get install -y kubelet kubeadm kubectl
    #           sudo apt-mark hold kubelet kubeadm kubectl
    #   retries: 3
    #   delay: 10  